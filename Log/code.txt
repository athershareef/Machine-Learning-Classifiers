#Libraries
library(corrplot)
library(caret)
library(pROC)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
library(plyr)
library(e1071)
library(neuralnet)
library(ipred)
library(kernlab)
library(klaR)
library(ada)


#Loading data from data set URL - blood-transfusion dataset
transfusion <- read.csv(url("http://archive.ics.uci.edu/ml/machine-learning-databases/blood-transfusion/transfusion.data"))

names(transfusion) <- c("Recency (Months)","Frequency (times)","Blood Donated (cc)","Time (months)","Donated blood")
Donated<-transfusion$`Donated blood`


summary(transfusion)

Correlation <- cor(transfusion)

corrplot(cor(transfusion))
#corrplot(Correlation, method="pie")

#Pre-Processing and Scaling
clean=!anyNA(transfusion)   #No NA values if Clean flag is True

preProcParam <- preProcess(transfusion[1:4], method = c("center", "scale"))
prtrain <- predict(preProcParam, transfusion[1:4])
prtrain <- cbind(prtrain,Donated)


summary(prtrain)

#Sampling Train and Test Data
set.seed(44)
trainsamples<-sample(nrow(prtrain),0.7*nrow(prtrain))
trainx<-data.frame(prtrain[trainsamples,])
trainx
testx<-data.frame(prtrain[-trainsamples,])

train <- data.frame(trainx[1:2],trainx[4:5])
test <- data.frame(testx[1:2],testx[4:5])
corrplot(cor(train))

#Seperate X and Y
x <- train[1:3]
y <- factor(train$Donated)

#Control for Cross Validation parameter is 10 i.e. K-10

ctrl=trainControl(method='cv',number=10)

#Writing Formula as default formula doesnt work with neuralnet package
n <- names(train)
f <- as.formula(paste("Donated ~", paste(n[!n %in% "Donated"], collapse = " + ")))    

#Decision Tree Model

      mytree<-rpart(train$Donated~., data=train, method = "class")
      ptree<- prune(mytree, cp=0.02)
      
      #Display Tree
      fancyRpartPlot(mytree)
      fancyRpartPlot(ptree)
      
      # Make predictions on the test set
      predict.dtree <- predict(mytree, newdata = test, type = "class")
      predict.dtree.prune <- predict(ptree, newdata = test, type = "class")
      
      #Use caret's confusion matrix
      conTree<-confusionMatrix(predict.dtree,test$Donated)
      conTreePrune<-confusionMatrix(predict.dtree.prune,test$Donated)
      
      
      #Accuracy and Confusion Matrix
      conTree
      
      #Area under ROC
      
      ROC.dtree<-roc(test$Donated,as.numeric(predict.dtree))
      plot(ROC.dtree, col = "blue",print.auc=TRUE)
      auc.dtree<-auc(ROC.dtree)
      auc.dtree
      
      #Accuracy and Confusion Matrix
      conTreePrune
      
      #Area under ROC
      
      ROC.dtree.prune<-roc(test$Donated,as.numeric(predict.dtree.prune))
      plot(ROC.dtree.prune, col = "blue",print.auc=TRUE)
      auc.dtree.prune<-auc(ROC.dtree.prune)
      auc.dtree.prune


# Perceptron




#Neural Net
      
      # nn <- train(as.factor(Don)~., data = train, method = "nnet",trControl=trainControl(method='cv',number=10))
      # nn2 <- neuralnet(Don~R+Fa+T, data=x, linear.output=FALSE)
      # nn3<-train(as.factor(Don)~R+Fa+B+T, data=train, method="nnet",linear.output=FALSE)
      # predict<- compute(nn, test)
      
      net <- neuralnet(f, data=train, hidden=6,linear.output=FALSE)
      
      predict.nnet<-compute(net,test[1:3])
        
      #extracting 1's and zeros
      
      vals<- predict.nnet$net.result>0.2
      predict.nnet.vals=ifelse(vals=="TRUE",1,0)
      
      #Use caret's confusion matrix
      
      conNeural<-confusionMatrix(predict.nnet.vals,test$Donated)
      #Accuracy and Confusion Matrix
      
      conNeural
      
      #Area under ROC
      
      ROC.nnet<-roc(test$Donated,as.numeric(predict.nnet.vals))
      plot(ROC.nnet, col = "red",print.auc=TRUE)
      auc.nnet<-auc(ROC.nnet)
      auc.nnet
      plot(net)
      
#Deep Network
      #Writing Formula as default formula doesnt work with neuralnet package
      #Pass list for Deep network
      
      deep <- neuralnet(f, data=train, hidden=c(2,5,2,3,5,2),linear.output=FALSE)
      
      predict.deep<-compute(deep,test[1:3])
      
      #extracting 1's and zeros
      
      vals<- predict.deep$net.result>0.2
      predict.deep.vals=ifelse(vals=="TRUE",1,0)
      
      #Use caret's confusion matrix
      
      con.deep<-confusionMatrix(predict.deep.vals,test$Donated)
      con.deep
      
      #Area under ROC
      
      ROC.deep<-roc(test$Donated,as.numeric(predict.deep.vals))
      plot(ROC.deep, col = "red",print.auc=TRUE)
      auc.deep<-auc(ROC.deep)
      auc.deep
      plot(deep)
      
#SVM
      l.svm <- train(x,y, method = "svmLinear", trControl=ctrl)
      p.svm <- train(x,y, method = "svmRadial", trControl=ctrl)
      
      l.svm
      p.svm
      
      predict.svm<-predict(l.svm, newdata=test[1:3])
      predict.psvm<-predict(p.svm, newdata=test[1:3])
      
      #Use caret's confusion matrix
      
      conSVM<-confusionMatrix(predict.svm,test$Donated)
      conSVM
      conpSVM<-confusionMatrix(predict.psvm,test$Donated)
      conpSVM
      #Area under ROC
      
      ROC.svm<-roc(test$Donated,as.numeric(predict.svm))
      plot(ROC.svm, col = "blue",print.auc=TRUE)
      auc.svm<-auc(ROC.svm)
      auc.svm
      ROC.psvm<-roc(test$Donated,as.numeric(predict.psvm))
      plot(ROC.psvm, col = "red",print.auc=TRUE)
      auc.psvm<-auc(ROC.psvm)
      auc.psvm
      
# Logistic Regression
      
      glm <- train(x,y, method="glm",trControl=ctrl)
      
      predict.glm<-predict(glm,test[1:3])

      #Use caret's confusion matrix
      
      conGLM<-confusionMatrix(predict.glm,test$Donated)
      #Accuracy and Confusion Matrix
      
      conGLM
      
      #Area under ROC
      
      ROC.glm<-roc(test$Donated,as.numeric(predict.glm))
      plot(ROC.glm, col = "red",print.auc=TRUE)
      auc.glm<-auc(ROC.glm)
      auc.glm
      
# Bagging
      bag <- train(x,y, method="treebag",trControl=ctrl, control=rpart.control(maxdepth=15,cp=0.0010000,minsplit=30,xval=5),iter=200)
      
      predict.bag<-predict(bag,test[1:3])
      
      #Use caret's confusion matrix
      
      conBAG<-confusionMatrix(predict.bag,test$Donated)
      #Accuracy and Confusion Matrix
      
      conBAG
      
      #Area under ROC
      
      ROC.bag<-roc(test$Donated,as.numeric(predict.bag))
      plot(ROC.bag, col = "red",print.auc=TRUE)
      auc.bag<-auc(ROC.bag)
      auc.bag